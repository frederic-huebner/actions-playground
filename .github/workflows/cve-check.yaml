name: CVE Check

on:
  workflow_dispatch:

jobs:
  trivy-vulnerability-check:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:

      - name: Debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3

      - name: Set up JDK 17
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2 # v3.11.0
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Create Gradle lockfiles
        run: ./gradlew resolveAndLockAll --write-locks

      - name: Check for vulnerabilities
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54 # v0.11.2
        id: cve_check
        with:
          scan-type: 'fs'
          scanners: 'vuln'
          format: 'json'
          scan-ref: '.'
          severity: 'MEDIUM,HIGH,CRITICAL'
          exit-code: '1'
          ignore-policy: '.github/workflows/ignore-policy.rego'
          output: 'cve-result.json'

      - name: Prepare CVE Slack payload
        if: failure()
        run: |
          cveSlackPayload=$(cat <<EOF
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${{ github.event.repository.name }}",
                  "emoji": true
                }
              }
            ]
          }
          EOF
          )
          
          echo "${cveSlackPayload}"
          
          for result in $(jq '.Results[]?' cve-result.json); do
          echo "${result}"
          done

#      - name: Notify CVEs in Slack
#        if: failure()
#        uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117 # v1.24.0
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
#        with:
#          channel-id: 'URGSVQ403' #'sda-dropwizard-commons-security'
#          payload-file-path: '.cve-slack-payload.json'

#      - name: Notify CVEs in Slack
#        if: failure()
#        env:
#          SLACK_WORKFLOW_WEBHOOK: ${{ secrets.SLACK_WORKFLOW_WEBHOOK }}
#        # All webhook variables known in the workflow are required.
#        # Therefore, empty values are defined in jq and filled with the actual values if they exist.
#        run: >
#          cat cve-result.json |
#          jq -c '.Results[]?.Vulnerabilities[]? | {VulnerabilityID:"",PkgName:"",InstalledVersion:"",FixedVersion:"",PrimaryURL:"",Title:"",Description:"",Severity:"",PublishedDate:"",LastModifiedDate:""} + .' |
#          while IFS=$'\n' read -r json; do curl -X POST $SLACK_WORKFLOW_WEBHOOK --header 'Content-Type: application/json' --data-raw "$json"; done


      - name: Notify no CVEs in Slack
        if: success()
        uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117 # v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'URGSVQ403' #'sda-dropwizard-commons-security'
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ github.event.repository.name }}",
                    "emoji": true
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": ":large_green_circle:  No CVEs found!"
                    }
                  ]
                }
              ]
            }
