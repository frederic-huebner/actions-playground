name: CVE Check

on:
  workflow_run:
    workflows:
      - Push Workflow Trigger
    types:
      - completed

jobs:
  trivy-vulnerability-check:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3

      - name: Set up JDK 17
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2 # v3.11.0
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Create Gradle lockfiles
        run: ./gradlew resolveAndLockAll --write-locks

      - name: Check for vulnerabilities
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54 # v0.11.2
        id: cve_check
        with:
          scan-type: 'fs'
          scanners: 'vuln'
          ignore-unfixed: true
          format: 'table'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          output: 'cve-result'

      - name: Print outcome
        if: always()
        run: |
          echo "${{ steps.cve_check.outcome }}"
          echo "Is outcome failure?: ${{ steps.cve_check.outcome == 'failure' }}"
          echo "${{ toJSON(github.event.workflow_run.pull_requests) }}"
          echo "Is Pull Request?: ${{ toJSON(github.event.workflow_run.pull_requests) != '[]' }}"

      - name: Comment CVEs on PR
        if: failure() && (toJSON(github.event.workflow_run.pull_requests) != '[]')
        uses: actions/github-script@v6 # v6.4.1
        env:
          PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const cveResult = fs.readFileSync('./cve-result');

            let body = `### Vulnerability Scan failed! ‚ùå
                        <details><summary>More details ...</summary>
                        ${cveResult}
                        </details>`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.PR_NUMBER,
              body: body
            });
